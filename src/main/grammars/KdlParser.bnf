{
    parserClass='dev.kdl.lang.parser.KdlParser'

    implements='dev.kdl.lang.psi.ext.KdlElement'
    extends='dev.kdl.lang.psi.ext.KdlElementImpl'

    psiClassPrefix='KdlPsi'
    psiImplClassSuffix='Impl'
    psiPackage='dev.kdl.lang.psi'
    psiImplPackage='dev.kdl.lang.psi.impl'

    elementTypeHolderClass='dev.kdl.lang.psi.ext.KdlElementTypes'
    elementTypeClass='dev.kdl.lang.lexer.KdlElementType'
    tokenTypeClass='dev.kdl.lang.lexer.KdlTokenType'

    generateTokenAccessors=true

    implements("node-block")="dev.kdl.lang.psi.ext.KdlCommentableItem"
    implements("node-prop-or-arg")="dev.kdl.lang.psi.ext.KdlCommentableItem"
    implements("node-children")="dev.kdl.lang.psi.ext.KdlCommentableItem"

    tokens = [
        SLASHDASH='/-'
        SLASH='/'
        BACKSLASH='\'
        SEMI=";"
        COMMA=","
        L_BRACE="{"
        R_BRACE="}"
        L_PAREN="("
        R_PAREN=")"
        L_BRACK="["
        R_BRACK="]"
        LESS_THEN="<"
        MORE_THEN=">"
        EQ="="
        QUOTE="\""

        NULL_LITERAL="null"
        TRUE_LITERAL="true"
        FALSE_LITERAL="false"

        DECIMAL_LITERAL
        HEX_LITERAL
        OCTAL_LITERAL
        BINARY_LITERAL

        RAW_STRING_LITERAL
        STRING_LITERAL

        BARE_IDENTIFIER

        NEWLINE
        UNICODE_SPACE
        SINGLE_LINE_COMMENT="SINGLE_LINE_COMMENT"
        MULTI_LINE_COMMENT="MULTI_LINE_COMMENT"
    ]
}

File ::= node-list

node-block ::= ('/-' node-space*)? type? identifier (node-space+ node-prop-or-arg)* (node-space* node-children ws*)? node-space* node-terminator? // terminator is not optional
node-prop-or-arg ::= ('/-' node-space*)? (prop | arg)
node-children ::= ('/-' node-space*)? '{' node-children-inner? '}' { pin=2 }

node-terminator ::= NEWLINE | ';' | <<eof>>

private node-children-inner ::= !'}' node-list &'}' { pin=1 recoverWhile=node-children-recover }
private node-list ::= linespace* (node-block linespace*)*
private node-children-recover ::= !'}'

private node-space ::= ws* escline ws* | ws+

identifier ::= string | BARE_IDENTIFIER
arg ::= value
prop ::= identifier ws* '=' ws* value { pin=3 } // whitespaces are illegal here
value ::= type? literal
literal ::= (string | BARE_IDENTIFIER | number | boolean | null) // BARE_IDENTIFIER is illegal here
type ::= '(' ws* identifier ws* ')' ws* // whitespaces are illegal here

string ::= RAW_STRING_LITERAL | STRING_LITERAL
number ::= DECIMAL_LITERAL | HEX_LITERAL | OCTAL_LITERAL | BINARY_LITERAL
boolean ::= 'true' | 'false'
null ::= 'null'

escline ::= '\' ws* NEWLINE

private linespace ::= NEWLINE | ws

private ws ::= UNICODE_SPACE