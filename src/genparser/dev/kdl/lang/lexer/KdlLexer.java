/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package dev.kdl.lang.lexer;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static dev.kdl.lang.psi.ext.KdlElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/exidex/IdeaProjects/intellij-kdl/src/main/grammars/KdlLexer.flex</tt>
 */
class KdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_SINGLE_LINE_COMMENT = 2;
  public static final int IN_MULTILINE_COMMENT = 4;
  public static final int IN_RAW_STRING = 6;
  public static final int IN_BARE_IDENTIFIER = 8;
  public static final int IN_BARE_IDENTIFIER_TAIL = 10;
  public static final int IN_KEYWORD = 12;
  public static final int IN_NUMBER = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\47\1\45\1\0\1\46\1\44\22\0\1\47\1\0\1\1\1\52\4\0\1\35\1\36\1\50\1"+
    "\15\1\34\1\51\1\11\1\3\1\16\1\23\6\21\2\14\1\0\1\33\1\41\1\43\1\42\2\0\4\7"+
    "\1\12\1\7\24\0\1\37\1\2\1\40\1\0\1\13\1\0\1\31\1\22\2\7\1\30\1\10\5\0\1\25"+
    "\1\0\1\24\1\20\2\0\1\27\1\32\1\26\1\4\2\0\1\17\2\0\1\5\1\0\1\6\7\0\1\46\32"+
    "\0\1\47\337\0\1\47\177\0\13\47\35\0\2\46\5\0\1\47\57\0\1\47\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\1\1\7\3\1\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\2\21\1\22\1\23"+
    "\2\24\2\23\1\25\7\26\2\27\4\30\1\31\1\30"+
    "\1\31\1\0\2\1\1\0\1\32\1\0\1\33\1\34"+
    "\1\35\10\0\1\36\1\0\1\37\1\40\1\0\1\7"+
    "\3\0\1\7\16\0\1\32\1\0\2\7\1\0\3\7"+
    "\16\0\2\31\1\0\1\41\1\42\1\43\1\44\2\0"+
    "\1\45\1\46\2\44\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u01ae\0\u01ae\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u01ae\0\u01ae\0\u01ae"+
    "\0\u01ae\0\u01ae\0\u01ae\0\u01ae\0\u01ae\0\u01ae\0\u0331\0\u01ae"+
    "\0\u035c\0\u01ae\0\u0387\0\u01ae\0\u03b2\0\u03dd\0\u0408\0\u01ae"+
    "\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u01ae\0\u0535"+
    "\0\u01ae\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0158"+
    "\0\u01ae\0\u0662\0\u0183\0\u01ae\0\u068d\0\u01ae\0\u01ae\0\u01ae"+
    "\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5"+
    "\0\u01ae\0\u0306\0\u01ae\0\u01ae\0\u0810\0\u01ae\0\u083b\0\u0866"+
    "\0\u045e\0\u0891\0\u04b4\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0183\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0158\0\u0f74\0\u0f9f\0\u01ae"+
    "\0\u01ae\0\u01ae\0\u0fca\0\u01ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\11\1\15\1\16\1\11"+
    "\1\17\3\11\1\20\1\21\1\22\2\11\1\20\1\11"+
    "\1\20\1\23\1\11\1\24\1\25\3\11\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\40\1\41\1\11\1\21\1\11\44\42\1\43\2\44"+
    "\7\42\1\45\44\42\1\46\3\42\1\47\51\42\10\50"+
    "\1\51\3\50\1\52\1\53\1\54\2\50\1\52\1\50"+
    "\1\52\1\55\1\50\1\56\22\50\1\53\1\50\1\42"+
    "\3\57\1\42\2\57\24\42\11\57\1\60\3\57\3\42"+
    "\10\61\1\62\13\61\1\63\1\61\1\64\40\61\1\65"+
    "\1\66\1\67\2\61\1\65\1\61\1\65\25\61\1\66"+
    "\1\61\1\70\3\71\1\70\2\71\24\70\11\71\1\72"+
    "\3\71\3\70\1\73\1\74\1\75\50\73\56\0\1\76"+
    "\44\0\1\77\1\100\1\0\1\70\3\71\1\70\2\71"+
    "\22\70\1\101\1\70\11\71\1\72\3\71\4\70\3\71"+
    "\1\70\2\71\2\70\1\102\1\103\2\20\1\70\1\20"+
    "\2\70\1\20\1\70\1\20\4\70\1\103\2\70\11\71"+
    "\1\72\3\71\4\70\3\71\1\70\2\71\5\70\1\20"+
    "\1\70\1\22\2\70\1\20\1\70\1\20\7\70\11\71"+
    "\1\72\3\71\4\70\3\71\1\70\2\71\2\70\1\102"+
    "\1\103\2\20\1\70\1\20\1\104\1\105\1\20\1\106"+
    "\1\20\4\70\1\103\2\70\11\71\1\72\3\71\4\70"+
    "\3\71\1\107\2\71\24\70\11\71\1\72\3\71\4\70"+
    "\3\71\1\70\2\71\20\70\1\110\3\70\11\71\1\72"+
    "\3\71\4\70\1\111\2\71\1\70\2\71\24\70\11\71"+
    "\1\72\3\71\2\70\1\112\45\0\1\40\54\0\1\41"+
    "\50\0\1\44\55\0\1\113\5\0\1\114\121\0\1\47"+
    "\31\0\1\115\22\0\3\116\1\0\2\116\2\0\1\117"+
    "\1\120\2\121\1\0\1\121\2\0\1\121\1\0\1\121"+
    "\4\0\1\120\2\0\11\116\1\122\3\116\17\0\1\121"+
    "\1\0\1\123\2\0\1\121\1\0\1\121\30\0\3\116"+
    "\1\0\2\116\2\0\1\117\1\120\2\121\1\0\1\121"+
    "\1\124\1\125\1\121\1\126\1\121\4\0\1\120\2\0"+
    "\11\116\1\122\3\116\7\0\1\127\75\0\1\130\70\0"+
    "\1\57\36\0\1\131\25\0\1\132\75\0\1\133\34\0"+
    "\1\134\1\135\2\65\1\0\1\65\2\0\1\65\1\0"+
    "\1\65\4\0\1\135\36\0\1\65\1\0\1\67\2\0"+
    "\1\65\1\0\1\65\40\0\1\134\1\135\2\65\1\0"+
    "\1\65\1\136\1\137\1\65\1\140\1\65\4\0\1\135"+
    "\67\0\1\71\5\0\1\73\1\141\1\75\50\73\1\70"+
    "\3\71\1\70\2\71\16\70\1\142\5\70\11\71\1\72"+
    "\3\71\4\70\3\71\1\70\2\71\5\70\1\143\1\70"+
    "\1\143\2\70\1\143\1\70\1\143\7\70\11\71\1\72"+
    "\3\71\4\70\3\71\1\70\2\71\5\70\1\144\1\145"+
    "\1\144\2\70\1\144\1\70\1\144\7\70\11\71\1\72"+
    "\3\71\1\70\1\145\2\70\3\71\1\70\2\71\2\146"+
    "\1\70\1\146\1\70\1\146\1\70\1\146\2\70\3\146"+
    "\4\70\2\146\1\70\11\71\1\72\3\71\4\70\3\71"+
    "\1\70\2\71\7\70\1\147\2\70\1\147\1\70\1\147"+
    "\7\70\11\71\1\72\3\71\4\70\3\71\1\70\2\71"+
    "\7\70\1\150\4\70\1\150\7\70\11\71\1\72\3\71"+
    "\4\70\3\71\1\70\2\71\16\70\1\151\5\70\11\71"+
    "\1\72\3\71\4\70\3\71\1\152\2\71\24\70\11\71"+
    "\1\72\3\71\3\70\25\0\1\153\41\0\1\154\1\0"+
    "\1\154\2\0\1\154\1\0\1\154\43\0\1\155\1\156"+
    "\1\155\2\0\1\155\1\0\1\155\25\0\1\156\46\0"+
    "\1\116\14\0\2\157\1\0\1\157\1\0\1\157\1\0"+
    "\1\157\2\0\3\157\4\0\2\157\37\0\1\160\2\0"+
    "\1\160\1\0\1\160\45\0\1\161\4\0\1\161\54\0"+
    "\1\162\31\0\1\163\73\0\1\164\52\0\1\165\31\0"+
    "\1\166\62\0\1\167\1\0\1\167\2\0\1\167\1\0"+
    "\1\167\43\0\1\170\1\171\1\170\2\0\1\170\1\0"+
    "\1\170\25\0\1\171\10\0\2\172\1\0\1\172\1\0"+
    "\1\172\1\0\1\172\2\0\3\172\4\0\2\172\37\0"+
    "\1\173\2\0\1\173\1\0\1\173\45\0\1\174\4\0"+
    "\1\174\27\0\1\70\3\71\1\70\2\71\23\70\1\152"+
    "\11\71\1\72\3\71\4\70\3\71\1\70\2\71\3\70"+
    "\1\103\2\143\1\70\1\143\2\70\1\143\1\70\1\143"+
    "\4\70\1\103\2\70\11\71\1\72\3\71\4\70\3\71"+
    "\1\70\2\71\4\70\2\144\1\70\1\144\2\70\1\144"+
    "\1\70\1\144\7\70\11\71\1\72\3\71\4\70\3\71"+
    "\1\70\2\71\5\70\1\144\1\70\1\144\2\70\1\144"+
    "\1\70\1\144\7\70\11\71\1\72\3\71\4\70\3\71"+
    "\1\70\2\71\2\146\1\70\3\146\1\70\1\146\2\70"+
    "\3\146\4\70\2\146\1\70\11\71\1\72\3\71\4\70"+
    "\3\71\1\70\2\71\4\70\1\147\2\70\1\147\2\70"+
    "\1\147\1\70\1\147\7\70\11\71\1\72\3\71\4\70"+
    "\3\71\1\70\2\71\4\70\1\150\2\70\1\150\4\70"+
    "\1\150\7\70\11\71\1\72\3\71\4\70\3\71\1\70"+
    "\2\71\16\70\1\175\5\70\11\71\1\72\3\71\4\70"+
    "\3\71\1\70\2\71\21\70\1\175\2\70\11\71\1\72"+
    "\3\71\3\70\32\0\1\163\21\0\3\116\1\0\2\116"+
    "\3\0\1\120\2\154\1\0\1\154\2\0\1\154\1\0"+
    "\1\154\4\0\1\120\2\0\11\116\1\122\3\116\4\0"+
    "\3\116\1\0\2\116\4\0\2\155\1\0\1\155\2\0"+
    "\1\155\1\0\1\155\7\0\11\116\1\122\3\116\17\0"+
    "\1\155\1\0\1\155\2\0\1\155\1\0\1\155\30\0"+
    "\3\116\1\0\2\116\2\157\1\0\3\157\1\0\1\157"+
    "\2\0\3\157\4\0\2\157\1\0\11\116\1\122\3\116"+
    "\4\0\3\116\1\0\2\116\4\0\1\160\2\0\1\160"+
    "\2\0\1\160\1\0\1\160\7\0\11\116\1\122\3\116"+
    "\4\0\3\116\1\0\2\116\4\0\1\161\2\0\1\161"+
    "\4\0\1\161\7\0\11\116\1\122\3\116\30\0\1\176"+
    "\55\0\1\176\54\0\1\177\45\0\1\200\55\0\1\201"+
    "\34\0\1\135\2\167\1\0\1\167\2\0\1\167\1\0"+
    "\1\167\4\0\1\135\35\0\2\170\1\0\1\170\2\0"+
    "\1\170\1\0\1\170\43\0\1\170\1\0\1\170\2\0"+
    "\1\170\1\0\1\170\36\0\2\172\1\0\3\172\1\0"+
    "\1\172\2\0\3\172\4\0\2\172\34\0\1\173\2\0"+
    "\1\173\2\0\1\173\1\0\1\173\42\0\1\174\2\0"+
    "\1\174\4\0\1\174\30\0\3\202\1\0\2\202\24\0"+
    "\11\202\1\203\3\202\33\0\1\204\67\0\1\202\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4085];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\1\1\11\1\1\2\11\7\1\11\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\3\1\1\11\6\1"+
    "\1\11\1\1\1\11\6\1\1\0\1\11\1\1\1\0"+
    "\1\11\1\0\3\11\10\0\1\11\1\0\2\11\1\0"+
    "\1\11\3\0\1\1\16\0\1\1\1\0\2\1\1\0"+
    "\3\1\16\0\2\1\1\0\4\1\2\0\3\11\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[132];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /**
    * '#+' stride demarking start/end of raw string
    */
  private int zzShaStride = -1;

  /**
    * Dedicated storage for starting position of some previously successful
    * match
    */
  private int zzPostponedMarkedPos = -1;

  /**
    * Dedicated nested-comment level counter
    */
  private int zzNestedCommentLevel = 0;
  IElementType imbueBlockComment() {
      assert(zzNestedCommentLevel == 0);
      yybegin(YYINITIAL);

      zzStartRead = zzPostponedMarkedPos;
      zzPostponedMarkedPos = -1;

      return MULTI_LINE_COMMENT;
  }

  IElementType imbueRawLiteral() {
      zzStartRead = zzPostponedMarkedPos;
      zzShaStride = -1;
      zzPostponedMarkedPos = -1;

      return RAW_STRING_LITERAL;
  }

  IElementType imbueBareIdentifier() {
      zzStartRead = zzPostponedMarkedPos;
      zzPostponedMarkedPos = -1;

      return BARE_IDENTIFIER;
  }

  void resetMatch(int newState) {
        yybegin(newState);
        yypushback(yylength());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_SINGLE_LINE_COMMENT: {
              yybegin(YYINITIAL); return SINGLE_LINE_COMMENT;
            }  // fall though
            case 133: break;
            case IN_MULTILINE_COMMENT: {
              zzNestedCommentLevel = 0; return imbueBlockComment();
            }  // fall though
            case 134: break;
            case IN_RAW_STRING: {
              yybegin(YYINITIAL);
        return imbueRawLiteral();
            }  // fall though
            case 135: break;
            case IN_BARE_IDENTIFIER_TAIL: {
              yybegin(YYINITIAL);
        return imbueBareIdentifier();
            }  // fall though
            case 136: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { zzPostponedMarkedPos = zzStartRead;
          yypushback(yylength());
          yybegin(IN_BARE_IDENTIFIER);
            } 
            // fall through
          case 40: break;
          case 2: 
            { return QUOTE;
            } 
            // fall through
          case 41: break;
          case 3: 
            { return BACKSLASH;
            } 
            // fall through
          case 42: break;
          case 4: 
            { return SLASH;
            } 
            // fall through
          case 43: break;
          case 5: 
            { return L_BRACE;
            } 
            // fall through
          case 44: break;
          case 6: 
            { return R_BRACE;
            } 
            // fall through
          case 45: break;
          case 7: 
            { resetMatch(IN_NUMBER);
            } 
            // fall through
          case 46: break;
          case 8: 
            { return SEMI;
            } 
            // fall through
          case 47: break;
          case 9: 
            { return COMMA;
            } 
            // fall through
          case 48: break;
          case 10: 
            { return L_PAREN;
            } 
            // fall through
          case 49: break;
          case 11: 
            { return R_PAREN;
            } 
            // fall through
          case 50: break;
          case 12: 
            { return L_BRACK;
            } 
            // fall through
          case 51: break;
          case 13: 
            { return R_BRACK;
            } 
            // fall through
          case 52: break;
          case 14: 
            { return LESS_THEN;
            } 
            // fall through
          case 53: break;
          case 15: 
            { return MORE_THEN;
            } 
            // fall through
          case 54: break;
          case 16: 
            { return EQ;
            } 
            // fall through
          case 55: break;
          case 17: 
            { return NEWLINE;
            } 
            // fall through
          case 56: break;
          case 18: 
            { return UNICODE_SPACE;
            } 
            // fall through
          case 57: break;
          case 19: 
            { 
            } 
            // fall through
          case 58: break;
          case 20: 
            { resetMatch(YYINITIAL); return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 59: break;
          case 21: 
            { int shaExcess = yylength() - 1 - zzShaStride;
        if (shaExcess >= 0) {
            yypushback(shaExcess);
            yybegin(YYINITIAL);
            return imbueRawLiteral();
        }
            } 
            // fall through
          case 60: break;
          case 22: 
            { resetMatch(IN_BARE_IDENTIFIER_TAIL);
            } 
            // fall through
          case 61: break;
          case 23: 
            { resetMatch(YYINITIAL);
        return imbueBareIdentifier();
            } 
            // fall through
          case 62: break;
          case 24: 
            { resetMatch(YYINITIAL);
            } 
            // fall through
          case 63: break;
          case 25: 
            { return DECIMAL_LITERAL;
            } 
            // fall through
          case 64: break;
          case 26: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 65: break;
          case 27: 
            { resetMatch(IN_SINGLE_LINE_COMMENT);
            } 
            // fall through
          case 66: break;
          case 28: 
            { resetMatch(IN_MULTILINE_COMMENT);
            } 
            // fall through
          case 67: break;
          case 29: 
            { return SLASHDASH;
            } 
            // fall through
          case 68: break;
          case 30: 
            { yybegin(IN_RAW_STRING);
          zzPostponedMarkedPos = zzStartRead;
          zzShaStride          = yylength() - 2;
            } 
            // fall through
          case 69: break;
          case 31: 
            { if (zzNestedCommentLevel++ == 0)
                zzPostponedMarkedPos = zzStartRead;
            } 
            // fall through
          case 70: break;
          case 32: 
            { if (--zzNestedCommentLevel == 0)
                return imbueBlockComment();
            } 
            // fall through
          case 71: break;
          case 33: 
            { return HEX_LITERAL;
            } 
            // fall through
          case 72: break;
          case 34: 
            { return OCTAL_LITERAL;
            } 
            // fall through
          case 73: break;
          case 35: 
            { return BINARY_LITERAL;
            } 
            // fall through
          case 74: break;
          case 36: 
            { resetMatch(IN_KEYWORD);
            } 
            // fall through
          case 75: break;
          case 37: 
            { return NULL_LITERAL;
            } 
            // fall through
          case 76: break;
          case 38: 
            { return TRUE_LITERAL;
            } 
            // fall through
          case 77: break;
          case 39: 
            { return FALSE_LITERAL;
            } 
            // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
