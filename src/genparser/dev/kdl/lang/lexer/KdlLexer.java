/* The following code was generated by JFlex 1.7.0-1 tweaked for IntelliJ platform */

package dev.kdl.lang.lexer;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;import org.intellij.lang.regexp.RegExpTT;

import static com.intellij.psi.TokenType.*;
import static dev.kdl.lang.psi.ext.KdlElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-1
 * from the specification file <tt>/home/exidex/IdeaProjects/intellij-kdl/src/main/grammars/KdlLexer.flex</tt>
 */
class KdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_MULTILINE_COMMENT = 2;
  public static final int IN_RAW_STRING = 4;
  public static final int IN_BARE_IDENTIFIER = 6;
  public static final int IN_BARE_IDENTIFIER_TAIL = 8;
  public static final int IN_KEYWORD = 10;
  public static final int IN_NUMBER = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 2320 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\5\200\1\300\200\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\234\2\1\5\2\2");

  /* The ZZ_CMAP_A table has 768 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\50\1\45\1\0\1\46\1\44\22\0\1\50\1\0\1\1\1\53\4\0\1\35\1\36\1\51\1"+
    "\15\1\34\1\52\1\11\1\3\1\16\1\23\6\21\2\14\1\0\1\33\1\41\1\43\1\42\2\0\4\7"+
    "\1\12\1\7\24\0\1\37\1\2\1\40\1\0\1\13\1\0\1\31\1\22\2\7\1\30\1\10\5\0\1\25"+
    "\1\0\1\24\1\20\2\0\1\27\1\32\1\26\1\4\2\0\1\17\2\0\1\5\1\0\1\6\7\0\1\46\32"+
    "\0\1\50\337\0\1\50\177\0\13\50\35\0\2\46\5\0\1\50\57\0\1\50\237\0\1\47");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\0\1\6"+
    "\1\0\1\6\3\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\20\1\21\1\22\2\23"+
    "\1\24\7\25\2\26\4\27\1\30\1\27\1\30\2\31"+
    "\1\0\1\32\2\0\1\33\1\34\10\0\1\35\1\36"+
    "\1\0\1\6\3\0\1\6\16\0\1\32\2\37\1\0"+
    "\2\6\1\0\3\6\16\0\2\30\1\0\1\40\1\41"+
    "\1\42\1\43\2\0\1\44\1\45\2\43\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u018c\0\u018c\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u018c\0\u018c\0\u018c\0\u018c"+
    "\0\u018c\0\u018c\0\u018c\0\u018c\0\u018c\0\u0318\0\u018c\0\u018c"+
    "\0\u018c\0\u018c\0\u0344\0\u0370\0\u018c\0\u039c\0\u03c8\0\u03f4"+
    "\0\u0420\0\u044c\0\u0478\0\u018c\0\u04a4\0\u018c\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u018c\0\u05d8\0\u0160\0\u018c"+
    "\0\u0604\0\u0630\0\u018c\0\u018c\0\u065c\0\u0688\0\u06b4\0\u06e0"+
    "\0\u070c\0\u0738\0\u0764\0\u0790\0\u018c\0\u018c\0\u07bc\0\u018c"+
    "\0\u07e8\0\u0814\0\u03c8\0\u0840\0\u0420\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24"+
    "\0\u0a50\0\u0a7c\0\u0160\0\u0aa8\0\u018c\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c"+
    "\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c"+
    "\0\u0134\0\u0f78\0\u0fa4\0\u018c\0\u018c\0\u018c\0\u0fd0\0\u018c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\10\1\14\1\15\1\10"+
    "\1\16\3\10\1\17\1\20\1\21\2\10\1\17\1\10"+
    "\1\17\1\22\1\10\1\23\1\24\3\10\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\37\1\40\1\41\1\10\1\20\1\10\3\42\1\0"+
    "\45\42\1\43\3\42\1\44\52\42\10\45\1\46\3\45"+
    "\1\47\1\50\1\51\2\45\1\47\1\45\1\47\1\52"+
    "\1\45\1\53\23\45\1\50\1\45\1\42\3\54\1\42"+
    "\2\54\24\42\11\54\1\55\4\54\3\42\10\56\1\57"+
    "\13\56\1\60\1\56\1\61\41\56\1\62\1\63\1\64"+
    "\2\56\1\62\1\56\1\62\26\56\1\63\1\56\1\10"+
    "\3\65\1\10\2\65\24\10\11\65\1\66\4\65\3\10"+
    "\1\67\1\70\1\71\51\67\57\0\1\72\45\0\1\73"+
    "\1\74\1\0\1\10\3\65\1\10\2\65\22\10\1\75"+
    "\1\10\11\65\1\66\4\65\4\10\3\65\1\10\2\65"+
    "\2\10\1\76\1\77\2\17\1\10\1\17\2\10\1\17"+
    "\1\10\1\17\4\10\1\77\2\10\11\65\1\66\4\65"+
    "\4\10\3\65\1\10\2\65\5\10\1\17\1\10\1\21"+
    "\2\10\1\17\1\10\1\17\7\10\11\65\1\66\4\65"+
    "\4\10\3\65\1\10\2\65\2\10\1\76\1\77\2\17"+
    "\1\10\1\17\1\100\1\101\1\17\1\102\1\17\4\10"+
    "\1\77\2\10\11\65\1\66\4\65\4\10\3\65\1\103"+
    "\2\65\24\10\11\65\1\66\4\65\4\10\3\65\1\10"+
    "\2\65\20\10\1\104\3\10\11\65\1\66\4\65\4\10"+
    "\1\105\2\65\1\10\2\65\24\10\11\65\1\66\4\65"+
    "\2\10\1\24\45\0\1\37\11\0\1\106\123\0\1\44"+
    "\31\0\1\107\23\0\3\110\1\0\2\110\2\0\1\111"+
    "\1\112\2\113\1\0\1\113\2\0\1\113\1\0\1\113"+
    "\4\0\1\112\2\0\11\110\1\114\4\110\17\0\1\113"+
    "\1\0\1\115\2\0\1\113\1\0\1\113\31\0\3\110"+
    "\1\0\2\110\2\0\1\111\1\112\2\113\1\0\1\113"+
    "\1\116\1\117\1\113\1\120\1\113\4\0\1\112\2\0"+
    "\11\110\1\114\4\110\7\0\1\121\76\0\1\122\71\0"+
    "\1\54\37\0\1\123\26\0\1\124\76\0\1\125\35\0"+
    "\1\126\1\127\2\62\1\0\1\62\2\0\1\62\1\0"+
    "\1\62\4\0\1\127\37\0\1\62\1\0\1\64\2\0"+
    "\1\62\1\0\1\62\41\0\1\126\1\127\2\62\1\0"+
    "\1\62\1\130\1\131\1\62\1\132\1\62\4\0\1\127"+
    "\70\0\1\65\6\0\1\67\1\133\1\71\51\67\44\72"+
    "\1\134\2\135\5\72\1\10\3\65\1\10\2\65\16\10"+
    "\1\136\5\10\11\65\1\66\4\65\4\10\3\65\1\10"+
    "\2\65\5\10\1\137\1\10\1\137\2\10\1\137\1\10"+
    "\1\137\7\10\11\65\1\66\4\65\4\10\3\65\1\10"+
    "\2\65\5\10\1\140\1\141\1\140\2\10\1\140\1\10"+
    "\1\140\7\10\11\65\1\66\4\65\1\10\1\141\2\10"+
    "\3\65\1\10\2\65\2\142\1\10\1\142\1\10\1\142"+
    "\1\10\1\142\2\10\3\142\4\10\2\142\1\10\11\65"+
    "\1\66\4\65\4\10\3\65\1\10\2\65\7\10\1\143"+
    "\2\10\1\143\1\10\1\143\7\10\11\65\1\66\4\65"+
    "\4\10\3\65\1\10\2\65\7\10\1\144\4\10\1\144"+
    "\7\10\11\65\1\66\4\65\4\10\3\65\1\10\2\65"+
    "\16\10\1\145\5\10\11\65\1\66\4\65\4\10\3\65"+
    "\1\146\2\65\24\10\11\65\1\66\4\65\3\10\25\0"+
    "\1\147\42\0\1\150\1\0\1\150\2\0\1\150\1\0"+
    "\1\150\44\0\1\151\1\152\1\151\2\0\1\151\1\0"+
    "\1\151\26\0\1\152\46\0\1\110\15\0\2\153\1\0"+
    "\1\153\1\0\1\153\1\0\1\153\2\0\3\153\4\0"+
    "\2\153\40\0\1\154\2\0\1\154\1\0\1\154\46\0"+
    "\1\155\4\0\1\155\55\0\1\156\32\0\1\157\74\0"+
    "\1\160\53\0\1\161\32\0\1\162\63\0\1\163\1\0"+
    "\1\163\2\0\1\163\1\0\1\163\44\0\1\164\1\165"+
    "\1\164\2\0\1\164\1\0\1\164\26\0\1\165\10\0"+
    "\2\166\1\0\1\166\1\0\1\166\1\0\1\166\2\0"+
    "\3\166\4\0\2\166\40\0\1\167\2\0\1\167\1\0"+
    "\1\167\46\0\1\170\4\0\1\170\75\0\1\135\6\0"+
    "\1\10\3\65\1\10\2\65\23\10\1\146\11\65\1\66"+
    "\4\65\4\10\3\65\1\10\2\65\3\10\1\77\2\137"+
    "\1\10\1\137\2\10\1\137\1\10\1\137\4\10\1\77"+
    "\2\10\11\65\1\66\4\65\4\10\3\65\1\10\2\65"+
    "\4\10\2\140\1\10\1\140\2\10\1\140\1\10\1\140"+
    "\7\10\11\65\1\66\4\65\4\10\3\65\1\10\2\65"+
    "\5\10\1\140\1\10\1\140\2\10\1\140\1\10\1\140"+
    "\7\10\11\65\1\66\4\65\4\10\3\65\1\10\2\65"+
    "\2\142\1\10\3\142\1\10\1\142\2\10\3\142\4\10"+
    "\2\142\1\10\11\65\1\66\4\65\4\10\3\65\1\10"+
    "\2\65\4\10\1\143\2\10\1\143\2\10\1\143\1\10"+
    "\1\143\7\10\11\65\1\66\4\65\4\10\3\65\1\10"+
    "\2\65\4\10\1\144\2\10\1\144\4\10\1\144\7\10"+
    "\11\65\1\66\4\65\4\10\3\65\1\10\2\65\16\10"+
    "\1\171\5\10\11\65\1\66\4\65\4\10\3\65\1\10"+
    "\2\65\21\10\1\171\2\10\11\65\1\66\4\65\3\10"+
    "\32\0\1\157\22\0\3\110\1\0\2\110\3\0\1\112"+
    "\2\150\1\0\1\150\2\0\1\150\1\0\1\150\4\0"+
    "\1\112\2\0\11\110\1\114\4\110\4\0\3\110\1\0"+
    "\2\110\4\0\2\151\1\0\1\151\2\0\1\151\1\0"+
    "\1\151\7\0\11\110\1\114\4\110\17\0\1\151\1\0"+
    "\1\151\2\0\1\151\1\0\1\151\31\0\3\110\1\0"+
    "\2\110\2\153\1\0\3\153\1\0\1\153\2\0\3\153"+
    "\4\0\2\153\1\0\11\110\1\114\4\110\4\0\3\110"+
    "\1\0\2\110\4\0\1\154\2\0\1\154\2\0\1\154"+
    "\1\0\1\154\7\0\11\110\1\114\4\110\4\0\3\110"+
    "\1\0\2\110\4\0\1\155\2\0\1\155\4\0\1\155"+
    "\7\0\11\110\1\114\4\110\30\0\1\172\56\0\1\172"+
    "\55\0\1\173\46\0\1\174\56\0\1\175\35\0\1\127"+
    "\2\163\1\0\1\163\2\0\1\163\1\0\1\163\4\0"+
    "\1\127\36\0\2\164\1\0\1\164\2\0\1\164\1\0"+
    "\1\164\44\0\1\164\1\0\1\164\2\0\1\164\1\0"+
    "\1\164\37\0\2\166\1\0\3\166\1\0\1\166\2\0"+
    "\3\166\4\0\2\166\35\0\1\167\2\0\1\167\2\0"+
    "\1\167\1\0\1\167\43\0\1\170\2\0\1\170\4\0"+
    "\1\170\31\0\3\176\1\0\2\176\24\0\11\176\1\177"+
    "\4\176\33\0\1\200\70\0\1\176\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4092];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\1\1\11\1\1\2\11\1\0\1\1\1\0"+
    "\1\1\3\0\11\11\1\1\4\11\2\1\1\11\6\1"+
    "\1\11\1\1\1\11\6\1\1\11\1\1\1\0\1\11"+
    "\2\0\2\11\10\0\2\11\1\0\1\11\3\0\1\1"+
    "\16\0\2\1\1\11\1\0\2\1\1\0\3\1\16\0"+
    "\2\1\1\0\4\1\2\0\3\11\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /**
    * '#+' stride demarking start/end of raw string
    */
  private int zzShaStride = -1;

  /**
    * Dedicated storage for starting position of some previously successful
    * match
    */
  private int zzPostponedMarkedPos = -1;
  IElementType imbueRawLiteral() {
      zzStartRead = zzPostponedMarkedPos;
      zzShaStride = -1;
      zzPostponedMarkedPos = -1;

      return RAW_STRING_LITERAL;
  }

  IElementType imbueBareIdentifier() {
      zzStartRead = zzPostponedMarkedPos;
      zzPostponedMarkedPos = -1;

      return BARE_IDENTIFIER;
  }

  void resetMatch(int newState) {
        yybegin(newState);
        yypushback(yylength());
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  KdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case IN_RAW_STRING: {
              yybegin(YYINITIAL);
        return imbueRawLiteral();
            }  // fall though
            case 129: break;
            case IN_BARE_IDENTIFIER_TAIL: {
              yybegin(YYINITIAL);
        return imbueBareIdentifier();
            }  // fall though
            case 130: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return QUOTE;
            } 
            // fall through
          case 39: break;
          case 2: 
            { return BACKSLASH;
            } 
            // fall through
          case 40: break;
          case 3: 
            { return SLASH;
            } 
            // fall through
          case 41: break;
          case 4: 
            { return L_BRACE;
            } 
            // fall through
          case 42: break;
          case 5: 
            { return R_BRACE;
            } 
            // fall through
          case 43: break;
          case 6: 
            { resetMatch(IN_NUMBER);
            } 
            // fall through
          case 44: break;
          case 7: 
            { return SEMI;
            } 
            // fall through
          case 45: break;
          case 8: 
            { return COMMA;
            } 
            // fall through
          case 46: break;
          case 9: 
            { return L_PAREN;
            } 
            // fall through
          case 47: break;
          case 10: 
            { return R_PAREN;
            } 
            // fall through
          case 48: break;
          case 11: 
            { return L_BRACK;
            } 
            // fall through
          case 49: break;
          case 12: 
            { return R_BRACK;
            } 
            // fall through
          case 50: break;
          case 13: 
            { return LESS_THEN;
            } 
            // fall through
          case 51: break;
          case 14: 
            { return MORE_THEN;
            } 
            // fall through
          case 52: break;
          case 15: 
            { return EQ;
            } 
            // fall through
          case 53: break;
          case 16: 
            { return NEWLINE;
            } 
            // fall through
          case 54: break;
          case 17: 
            { return BOM;
            } 
            // fall through
          case 55: break;
          case 18: 
            { return UNICODE_SPACE;
            } 
            // fall through
          case 56: break;
          case 19: 
            { 
            } 
            // fall through
          case 57: break;
          case 20: 
            { int shaExcess = yylength() - 1 - zzShaStride;
        if (shaExcess >= 0) {
            yypushback(shaExcess);
            yybegin(YYINITIAL);
            return imbueRawLiteral();
        }
            } 
            // fall through
          case 58: break;
          case 21: 
            { resetMatch(IN_BARE_IDENTIFIER_TAIL);
            } 
            // fall through
          case 59: break;
          case 22: 
            { resetMatch(YYINITIAL);
        return imbueBareIdentifier();
            } 
            // fall through
          case 60: break;
          case 23: 
            { resetMatch(YYINITIAL);
            } 
            // fall through
          case 61: break;
          case 24: 
            { return DECIMAL_LITERAL;
            } 
            // fall through
          case 62: break;
          case 25: 
            { zzPostponedMarkedPos = zzStartRead;
          yypushback(yylength());
          yybegin(IN_BARE_IDENTIFIER);
            } 
            // fall through
          case 63: break;
          case 26: 
            { return STRING_LITERAL;
            } 
            // fall through
          case 64: break;
          case 27: 
            { yybegin(IN_MULTILINE_COMMENT);
            } 
            // fall through
          case 65: break;
          case 28: 
            { return SLASHDASH;
            } 
            // fall through
          case 66: break;
          case 29: 
            { yybegin(IN_RAW_STRING);
          zzPostponedMarkedPos = zzStartRead;
          zzShaStride          = yylength() - 2;
            } 
            // fall through
          case 67: break;
          case 30: 
            { yybegin(YYINITIAL);
        return MULTI_LINE_COMMENT;
            } 
            // fall through
          case 68: break;
          case 31: 
            { return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 69: break;
          case 32: 
            { return HEX_LITERAL;
            } 
            // fall through
          case 70: break;
          case 33: 
            { return OCTAL_LITERAL;
            } 
            // fall through
          case 71: break;
          case 34: 
            { return BINARY_LITERAL;
            } 
            // fall through
          case 72: break;
          case 35: 
            { resetMatch(IN_KEYWORD);
            } 
            // fall through
          case 73: break;
          case 36: 
            { return NULL_LITERAL;
            } 
            // fall through
          case 74: break;
          case 37: 
            { return TRUE_LITERAL;
            } 
            // fall through
          case 75: break;
          case 38: 
            { return FALSE_LITERAL;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
